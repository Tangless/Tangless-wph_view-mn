/**
 * SDK连接 功能相关
 */
var webimConfigs = (function () {
    /*
    * !!!!!  -- 切换im账户 注意事项:
    *       1, 更换 appkey;
    *       2, 更换游客token
    *
    * */
    var that = this;
    var isSwitch = false;
    var data = {
        teams: [],
        friendlist: [],
        teamMembers: [],
        sessions: [],
    };
    var href = window.location.href;
    var debugFlag = false;
    if (href.indexOf('wph') > 0) {
        debugFlag = true;
    }
    var appKey = '`{APPKEY}`';
    function login() {
        var account = globalData.user.user_id;
        var token = globalData.user.im_token;
        window.nim = this.nim = new NIM({
            debug: debugFlag,
            db: false,
            appKey: appKey,
            account: account,
            token: token,
            syncSessionUnread: true,
            currSess: '',
            onconnect: function onConnect() {
                // potato.application.dispatch(new potato.Event('IMLogined'));
                console.log('网易IM连接成功');
                data.sessions = readStorgeSessions();
            },
            onwillreconnect: onWillReconnect,
            ondisconnect: onDisconnect,
            onerror: onError,
            //好友
            onfriends: onFriends,
            // 会话
            onsessions: onSessions,
            onupdatesession: onUpdateSession,
            setCurrSession: setCurrSession,
            // 消息
            onroamingmsgs: onRoamingMsgs,
            onofflinemsgs: onOfflineMsgs,
            onmsg: onMsg,
            // 同步完成
            onsyncdone: onSyncDone,
            onsysmsg: onSysMsg,
        });
        nimMsgPool.init();
    }

    var nimMsgPool = (function () {
        var _autoID = 0;
        var _historyLoading = {};
        var _msgDataStr = '{ "version": ' + _autoID + ' }', _updateList = [];
        var _inited = false;
        function setMsgData(data) {
            _autoID++;
            data.version = _autoID;
            _msgDataStr = JSON.stringify(data);
        }
        function getMsgData() {
            return JSON.parse(_msgDataStr);
        }
        function setInfo(type, sid, info) {
            var msgData = getMsgData();
            function check(_sid, _info) {
                if (_sid == undefined) {
                    throw "sid is not string!";
                }
                if (!msgData[_sid]) {
                    msgData[_sid] = { history: null, news: [], unread: 0, pullMsg: null, lastMsg: '' };
                }
                msgData[_sid][type] = _info;
            }
            if (info !== undefined) {
                check(sid, info);
                setMsgData(msgData);
            } else {
                var map = sid;
                for (sid in map) {
                    check(sid, map[sid][type]);
                }
                setMsgData(msgData);
            }
        }
        function setMsgs(type, sid, arr) {
            var msgData = getMsgData();
            function check(_sid, _arr) {
                if (_sid == undefined) {
                    throw "sid is not string!";
                }
                if (!msgData[_sid]) {
                    msgData[_sid] = { history: null, news: [], unread: 0, pullMsg: null, lastMsg: '' };
                }
                if (!msgData[_sid][type] || !msgData[_sid][type].length) {
                    msgData[_sid][type] = _arr;
                } else {
                    var list = msgData[_sid][type];
                    var map = {};
                    for (var i = 0, k = list.length; i < k; i++) {
                        var item = list[i];
                        map[item.idClient] = item;
                    }
                    for (var i = 0, k = _arr.length; i < k; i++) {
                        var item = _arr[i];
                        if (!map[item.idClient]) {
                            list.push(item)
                        }
                    }
                }
            }
            if (arr !== undefined) {
                check(sid, arr);
                setMsgData(msgData);
            } else {
                var map = sid;
                for (sid in map) {
                    check(sid, map[sid][type]);
                }
                setMsgData(msgData);
            }
        }
        setInterval(function () {
            if (!_inited) { return false; }
            var msgData = getMsgData();
            for (var i = 0, k = _updateList.length; i < k; i++) {
                var mod = _updateList[i];
                var session = mod.session;
                if (session) {
                    if (session == "all") {
                        if (mod.messages.version != msgData.version) {
                            mod.messages = msgData;
                            mod.update(msgData);
                        }
                    } else {
                        var msgList = msgData[session];
                        if (!msgList) {
                            msgList = msgData[session] = { "history": null, "news": [], "unread": 0, lastMsg: '' };
                        }
                        if (!msgList.history || msgList.pullMsg) {
                            getLastHistroyMsg(session);
                        }
                        // if(!msgList.groupInfo){
                        //     getGroupInfo(session);
                        // }
                        var nnum = msgList.news.length;
                        var onum = mod.messages.news.length;
                        if (nnum > onum) {
                            mod.messages.news = msgList.news.map(function (item) {
                                return item;
                            });
                            mod.update(msgList.news.slice(onum));
                        }
                        if (msgList.history) {
                            var nnum = msgList.history.length;
                            var onum = mod.messages.history.length;
                            if (nnum > onum) {
                                mod.messages.history = msgList.history.map(function (item) {
                                    return item;
                                });
                                mod.history(msgList.history.slice(onum));
                            }
                        }
                    }
                }
            }
        }, 1000);
        //获取上一屏历史消息并缓存
        function getLastHistroyMsg(session) {
            if (_historyLoading[session]) {
                return;
            }
            _historyLoading[session] = true;
            webimConfigs.loadHistroy(session, function (msgList) {
                setHistory(msgList);
            },
                function () {
                    setHistory([]);
                })
            function setHistory(msgs) {
                exports.setHistory(session, msgs);
                setTimeout(function () {
                    _historyLoading[session] = false;
                }, 3000)//防止过快刷新
            }
        }
        var exports = {
            setUnread: function (sid, n) {
                setInfo("unread", sid, n);
            },
            setHistory: function (sid, history) {
                setMsgs("history", sid, history);
            },
            setNews: function (sid, news) {
                setMsgs("news", sid, news);
            },
            setPullMsg: function (sid, pull) {
                setInfo("pullMsg", sid, pull);
            },
            setLastMsg: function (sid, msg) {
                setInfo("lastMsg", sid, msg);
            },
            addListener: function (mod) {
                _updateList.push(mod);
            },
            init: function () {
                _inited = true;
            },
            getMsgData: getMsgData
        }
        return exports;
    })();
    function onWillReconnect(obj) {
        // 此时说明 `SDK` 已经断开连接, 请开发者在界面上提示用户连接已断开, 而且正在重新建立连接
        console.log('即将重连');
        // console.log(obj.retryCount);
        // console.log(obj.duration);
    }

    function onDisconnect(error) {
        // 此时说明 `SDK` 处于断开状态, 开发者此时应该根据错误码提示相应的错误信息, 并且跳转到登录页面
        console.log('丢失连接');
        console.log(error);
        if (error) {
            switch (error.code) {
                // 账号或者密码错误, 请跳转到登录页面并提示错误
                case 302:
                    break;
                // 被踢, 请提示错误后跳转到登录页面
                case 'kicked':
                    break;
                default:
                    break;
            }
        }
    }

    function onError(error) {
        console.log(error);
    }
    function onSysMsg(sysMsg) {
        console.log('收到系统通知', sysMsg);
        if (sysMsg.type == "addFriend") {
            nim.getUser({
                account: sysMsg.from,
                sync: true,
                done: function (error, user) {
                    if (!error) {
                        data.friendlist.push(user);
                    }
                }
            })
        }
    }
    function onFriends(friends) {
        var friendlist = friends;
        var friendlist = data.friendlist;
        friendlist = nim.mergeFriends(friendlist, friends);
        friendlist = nim.cutFriends(friendlist, friends.invalid);
        //提取有用信息，account
        var f_arr = [];
        for (var i = 0; i < friendlist.length; i++) {
            f_arr[i] = friendlist[i].account;
        }
        //获取用户资料
        getUsersInfo(f_arr, function (users) {
            data.friendlist = users;
        })

    };
    function onAddFriend(friend) {
        data.friends = nim.mergeFriends(data.friends, friend);
    }
    function onSyncTeamMembersDone() {
        // console.log('同步群列表完成');
        // potato.application.dispatch(new potato.Event('IMSyncSuccess'));
    }

    function onSessions(sessions) {
        //获取所有会话的未读消息
        var msgData = {};
        for (var i = 0; i < sessions.length; i++) {
            //如果有缓存消息，则将缓存消息的数量并入新的会话列表中
            if (data.sessions.length != 0) {
                var storageSess = data.sessions;
                for (var j = 0; j < storageSess.length; j++) {
                    if (storageSess[j].to == sessions[i].to) {
                        sessions[i].unread += parseInt(storageSess[j].unread);
                        storageSess[j].lastMsg = sessions[i].lastMsg;
                        break;
                    }
                }
            }

            var group = sessions[i];
            var session = group.to;
            if (!msgData[session]) {
                msgData[session] = {};
            }
            msgData[session].unread = group.unread;
            msgData[session].pullMsg = 0;
            if (group.lastMsg.type == 'image') {
                group.lastMsg.text = '[图片]'
            } else if (group.lastMsg.type == 'notification') {
                if (group.lastMsg.attach.type == "passTeamApply") {
                    group.lastMsg.text = '进入聊天室'
                }
                if (group.lastMsg.attach.type == 'leaveTeam') {
                    group.lastMsg.text = '退出聊天室'
                }
            }
            msgData[session].lastMsg = group.lastMsg;
        }
        data.sessions = sessions;
        nimMsgPool.setUnread(msgData);
        nimMsgPool.setPullMsg(msgData);
        nimMsgPool.setLastMsg(msgData);
        contactProjectAndSession();
    }

    function onUpdateSession(session) {
        /*
        * isSwitch这个变量用于判断是否是 网易切换会话导致的此方法的调用;
        * 因为此方法始终会返回一个lastmsg字段,在切换会话时并非是新消息,所以不应该加入新消息;
        * */
        if (isSwitch) {
            isSwitch = false;
            return
        }
        if (!session.lastMsg) {
            return
        }
        if (session.lastMsg.type == 'notification' && session.lastMsg.attach != undefined && session.lastMsg.attach.type != "passTeamApply") {
            return
        }
        console.log('会话更新了', session);

        session.lastMsg = parseMsg(session.lastMsg);
        if (session.lastMsg == undefined) {
            return
        }
        nimMsgPool.setNews(session.to, [session.lastMsg]);

        if (session.lastMsg && session.lastMsg.text.indexOf('chat-img') > 0) {
            session.lastMsg.text = '[图片]'
        }
        nimMsgPool.setLastMsg(session.to, session.lastMsg);
        if (session.to == nim.currSess) {
            nimMsgPool.setUnread(session.to, 0);
            setSessionUnread(session.to);
        } else {
            nimMsgPool.setUnread(session.to, session.unread);
        }
        nimMsgPool.setPullMsg(session.to, 0);
        if (session.lastMsg.type == 'text') {
            data.sessions = nim.mergeSessions(data.sessions, session);
        }
        if (session.lastMsg.from != '4') {
            contactProjectAndSession();
        }
        //网站客服新消息通知，触发事件
        if (session.lastMsg.from == '4' && session.lastMsg.text && nim.currSess != '4') {
            $(document).trigger('newMsgFromServ', [session.lastMsg.text]);
        }
    }

    function onRoamingMsgs(obj) {
        // console.log('漫游消息', obj);

    }

    function onOfflineMsgs(obj) {
        // console.log('离线消息', obj);
        // pushMsg(obj.msgs);
    }

    function onMsg(msg) {
        console.log('收到消息', msg.scene, msg.type, msg);
    }

    function parseMsg(msg) {
        //如果是图片消息,改造一下
        if (msg.type == 'image') {
            msg.type = 'text';
            msg.text = "<img class='chat-img' src='" + msg.file.url + "' evt='scanBig' />"
        }
        // 如果是服务器发送的发布项目的初始化消息，则更改消息内容，生成界面dom
        if (msg.text.indexOf("</data>") > 0) {
            msg.text = msg.text.replace(/data/g, 'i');
            // 截取项目信息
            var json = msg.text.match(/<i>(\S*)<\/i>/)[1];
            json = JSON.parse(json);
            var cateIcon = "icon-weixiu-copy";
            json.cate == "1" ? cateIcon = "icon-weixiu-copy" : cateIcon = "icon-gongju";
            msg.text += '<label class="demand-label" evt="openDemandInfo" did="' + json.id + '"><span class="' + cateIcon + '"></span>点击前往，查看详情</label>'
            if (msg.fromNick == '') {
                msg.fromNick = json.nickname;
            }
        }
        var user = getUser(msg.from);
        if (user) {
            msg.avatar = user.avatar;
            msg.fromNick = user.nick || user.nickname;
            msg.company = user.com || user.custom && JSON.parse(user.custom).com || '';
        }
        return msg
    }

    function pushMsg(msgs) {
        if (!Array.isArray(msgs)) {
            msgs = [msgs];
        }
        var sessionId = msgs[0].sessionId;
        data.msgs = data.msgs || {};
        data.msgs[sessionId] = nim.mergeMsgs(data.msgs[sessionId], msgs);
    }

    function onSyncDone() {
        // console.log('同步完成');
        webimConfigs.chatRoomReady = true;
        $(document.body).trigger('imInit');
        // 同步完成后，拉取所有参与的客户的聊天记录；
        var j_list = globalData.supList;
        for (var i = 0; i < j_list.length; i++) {
            var sessID = j_list[i].id;

            // 如果不存在会话，则插入一条
            var hasNoSess = true;
            webimConfigs.data.sessions.forEach(function (sess) {
                if (sess.sessionId == 'p2p-' + sessID) {
                    hasNoSess = false;
                }
            });
            if (hasNoSess) {
                var count = 0;
                loadHistroy(sessID, function (msgs) {
                    if (msgs.length == 0 || msgs[0].type == "fake") { return };
                    nimMsgPool.setHistory(msgs[0].target, msgs);
                    var toID = msgs[0].target || msgs[0].sessionId.split('-')[1];
                    var session = {
                        id: msgs[0].sessionId,
                        lastMsg: msgs[0],
                        scene: "p2p",
                        to: toID,
                        unread: 0,
                        updateTime: msgs[0].time
                    }
                    if (session.lastMsg && session.lastMsg.text.indexOf('chat-img') > 0) {
                        session.lastMsg.text = '[图片]'
                    }
                    // 如果不存在会话，则插入一条
                    var hasNoSess = true;
                    webimConfigs.data.sessions.forEach(function (sess) {
                        if (sess.id == session.id) {
                            hasNoSess = false;
                        }
                    });
                    hasNoSess && webimConfigs.data.sessions.push(session);
                    count++;
                    if (count >= j_list.length - 1) {
                        contactProjectAndSession();
                        readStorgeFriends();
                    }
                }, function () {

                })
            }
        }
    }
    /**
     * 设置当前会话，当前会话未读数会被置为0，同时开发者会收到 onupdatesession回调
     * @param {String} scene
     * @param {String} to
     */
    function setCurrSession(sel) {
        //将切换前的会话的未读数置为0
        if (nim.currSess) {
            nimMsgPool.setUnread(nim.currSess, 0);
        }
        if (sel) {
            isSwitch = true;
        }
        nim.currSess = sel;
        nim.currScene = 'p2p';//现在只有p2p关系
        //调用网易切换会话的方法,是为了将消息未读数重置为0;
        nim.setCurrSession('p2p' + '-' + sel);

        //将切换后的会话的未读数置为0
        nimMsgPool.setUnread(sel, 0);
        setSessionUnread(sel);

    }
    // 将data中的session未读数重置为0
    // 将项目中记录的未读数值也更改
    function setSessionUnread(sessionId) {
        for (var i = 0; i < data.sessions.length; i++) {
            if (data.sessions[i].to == sessionId) {
                data.sessions[i].unread = 0;
            }
        }
        if (sessionId != '4' && sessionId != nim.account) {
            contactProjectAndSession();
        }
    }
    // 获取历史纪录
    function loadHistroy(sid, succ, fail) {
        // 如果是伪造的聊天回话，则不请求
        var hasSave = localStorage.getItem('hasSavePhone');
        if (nim.currSess == '4fake' && globalData.user.user_type == 0 && !hasSave) {
            var fakeMsg = [{
                type: 'fakeNew',
                from: '4',
                text: '<div class="one-message"><img class="user-head-icon" src="`{VIEWSURL}`/m/customService/serviceChatPaneTpl/images/jvhua.jpg"><div class="msgbody"><div class="fakeSavePhone"><h5>请先登记排队</h5><input class="form-control mobile" type="tel" placeholder="手机号码" /><button class="btn btn-primary" evt="saveMobile">继续咨询</button></div><img class="triangle" src="`{VIEWSURL}`/m/customService/serviceChatPaneTpl/images/triangle2.png"></div></div>',
                flow: 'in'
            }, {
                type: 'fakeNew',
                from: '4',
                text: '<div class="one-message system-msg"><span>当前还有1人排队，大约需等待11秒</span></div>',
                flow: 'in'
            }]
            succ(fakeMsg);
            return
        }
        // 正常获取历史纪录逻辑
        var lastTime = new Date().getTime();
        var sessNew = nimMsgPool.getMsgData()[nim.currSess] && nimMsgPool.getMsgData()[nim.currSess].news;
        if (sessNew && sessNew.length > 0) {
            lastTime = sessNew[0].time;
        }
        nim.getHistoryMsgs({
            scene: 'p2p',
            endTime: lastTime,
            to: sid,
            done: function (error, obj) {
                console.log('获取好友历史消息' + (!error ? '成功' : '失败'));
                if (!error) {
                    var cloudMsg = obj.msgs;
                    if (cloudMsg) {
                        for (var i = 0, j = cloudMsg.length; i < j; i++) {
                            cloudMsg[i] = parseMsg(cloudMsg[i]);
                        }
                        if (cloudMsg.length > 0) {
                            succ(cloudMsg);
                        } else {
                            // 如果历史消息为空，则造一条假的消息，以便洽谈室的历史消息监听能够获得通知，从而移除loading动画；
                            var fakeMsg = [{
                                type: 'fake',
                            }]
                            if (nim.currSess == '4') {
                                fakeMsg = [{
                                    type: 'text',
                                    from: '4',
                                    text: '您好，有什么需要咨询吗？',
                                    flow: 'in'
                                }]
                            }
                            succ(fakeMsg);
                        }
                        succ(cloudMsg);
                    }
                } else {
                    fail();
                }
            }
        });
    }
    /**
     * 发送普通文本消息
     */
    function sendTextMessage(text, cb) {
        if (nim.currScene == '' || nim.currSess == '') {
            cb && cb.fail();
            return
        }
        nim.sendText({
            scene: nim.currScene,
            to: nim.currSess,
            text: text,
            done: function (error, msg) {
                if (!error) {
                    cb && cb.succ(msg);
                } else {
                    cb && cb.fail(error)
                }
            }
        });
    };
    /**
     * 发送图片消息
     */
    function sendImage() {
        $('.sendImgPending').removeClass('hide');
        nim.sendFile({
            scene: nim.currScene,
            to: nim.currSess,
            type: 'image',
            fileInput: 'imgFile',
            beginupload: function (upload) {
                // - 如果开发者传入 fileInput, 在此回调之前不能修改 fileInput
                // - 在此回调之后可以取消图片上传, 此回调会接收一个参数 `upload`, 调用 `upload.abort();` 来取消文件上传
            },
            uploadprogress: function (obj) {
                console.log('文件总大小: ' + obj.total + 'bytes');
                console.log('已经上传的大小: ' + obj.loaded + 'bytes');
                console.log('上传进度: ' + obj.percentage);
                console.log('上传进度文本: ' + obj.percentageText);
            },
            uploaddone: function (error, file) {
                console.log(error);
                console.log(file);
                console.log('上传' + (!error ? '成功' : '失败'));
                if (!error) {
                    $('.sendImgPending').addClass('hide');
                }
            },
            beforesend: function (msg) {
                console.log('正在发送image消息, id=' + msg.idClient);
            },
            done: function () {
                console.log('发送完成')
            }
        });
    }
    //获取多个好友的详细资料
    function getUsersInfo(arr, cb) {
        if (arr.length > 150) {
            arr = arr.slice(0, 149);
        }
        nim.getUsers({
            accounts: arr,
            sync: true,
            done: function (error, users) {
                if (!error) {
                    cb(users);
                }
            }
        })
    }
    //获取单个好友的详细资料
    function getUser(id) {
        var info = getSupplierInfo(id);
        if (id == globalData.user.user_id || id == '3') {
            return;
        }
        if (!info || info.avatar == '') {
            nim.getUser({
                account: id,
                sync: true,
                done: function (error, user) {
                    if (!error) {
                        return user;
                    }
                }
            })
        } else {
            return info;
        }

    }
    //直接添加好友（无需验证）
    function addFriend(account, cb) {
        nim.addFriend({
            account: account + '',
            done: function (error, obj) {
                if (!error) {
                    //更新好友列表及其资料
                    data.friendlist.push(obj.friend);
                    cb && cb.succ();
                } else {
                    cb && cb.fail && cb.fail();
                }
            }
        });
    }
    // 从参与列表中获取用户信息
    function getSupplierInfo(id) {
        var slist = globalData.supList;
        for (var i = 0; i < slist.length; i++) {
            if (slist[i].id == id) {
                return slist[i]
            }
        }
        return ''
    }
    /* 
        -- 绑定项目和聊天会话的关系
     */
    function contactProjectAndSession() {
        var friend_list = globalData.supList;
        var sessions = webimConfigs.data.sessions;
        var amt_group_unread = 0, amt_friends_unread = 0;
        // 整合聊天信息
        for (var j = 0; j < sessions.length; j++) {
            if (sessions[j].to == '4') {
                continue
            }
            // 如果暂时没有参与的工程商好友
            if (friend_list.length == 0) {
                amt_friends_unread += sessions[j].unread;
            } else {
                // 好友私聊消息
                for (var i = 0; i < friend_list.length; i++) {
                    // 好友未读
                    if (friend_list[i].id == sessions[j].to) {
                        friend_list[i].unread = sessions[j].unread;
                        amt_friends_unread += friend_list[i].unread;
                        // 如果未读数大于9，则显示…
                        if (sessions[j].unread > 9) {
                            friend_list[i].unread = '…'
                        }
                        if (!friend_list[i].lastMsg || friend_list[i].lastMsg == undefined) {
                            friend_list[i].lastMsg = sessions[j].lastMsg;
                        } else {
                            if (friend_list[i].lastMsg.time <= sessions[j].lastMsg.time) {
                                friend_list[i].lastMsg = sessions[j].lastMsg;
                            }
                        }
                    }
                }
            }
        }
        if (amt_friends_unread > 9) {
            amt_friends_unread = '…'
        }
        globalData.unread_num = amt_friends_unread;
    }
    return {
        setPullMsg: function (session) {
            nimMsgPool.setPullMsg(session, true);
        },
        addListener: function (mod) {
            nimMsgPool.addListener(mod);
        },
        getPool: function () {
            return nimMsgPool.getMsgData();
        },
        loadHistroy: loadHistroy,
        onSendMsg: sendTextMessage,
        sendImage: sendImage,
        setCurrSession: setCurrSession,
        login: login,
        nimMsgPool: nimMsgPool,
        data: data,
        addFriend: addFriend,
        chatRoomReady: false,
        contactProjectAndSession: contactProjectAndSession,
        lastSession: '3',// 默认初始化话为客服
    }
})();

// 页面卸载的时候，保存会话及未读消息数量统计
window.onbeforeunload = function () {
    var sessions = webimConfigs.data.sessions;
    var len = sessions.length;
    var arr = []
    for (var i = 0; i < len; i++) {
        if (sessions[i].unread != 0) {
            arr.push(sessions[i]);
        }
    }
    if (arr.length != 0) {
        arr = JSON.stringify(arr);
        localStorage.setItem("sessions-" + globalData.user.user_id, arr);
    } else {
        localStorage.removeItem("sessions-" + globalData.user.user_id)
    }
    // 好友列表缓存
    var friend_list = globalData.supList;
    localStorage.setItem("friend-" + globalData.user.user_id, JSON.stringify(friend_list));
};
// 读取缓存的会话
function readStorgeSessions() {
    var currUserSession = "sessions-" + globalData.user.user_id;
    var sessions = localStorage.getItem(currUserSession);
    if (sessions != null) {
        sessions = JSON.parse(sessions);
    } else {
        sessions = []
    }
    return sessions
}
// 读取缓存的好友列表
function readStorgeFriends() {
    var currUserSession = "friend-" + globalData.user.user_id;
    var friend = localStorage.getItem(currUserSession);
    if (friend != null) {
        friend = JSON.parse(friend);
    } else {
        friend = [];
    }
    // 整合缓存列表和服务器取来的数据进行对比处理合并
    var fri_list = globalData.supList;
    for (var i = 0; i < friend.length; i++) {
        var isOld = false;
        for (var j = 0; j < fri_list.length; j++) {
            if (friend[i].id == fri_list[j].id) {
                isOld = true;
            }
        }
        if (!isOld) {
            fri_list.push(friend[i]);
        }
    }
}