import * as tomato from "@po-to/tomato";
import * as tdom from "@po-to/tomato-jquery";
import * as project from "views/global/common/Project";
import * as funs from "views/global/common/Funs";
import * as api from "views/global/common/API";
import * as model from "views/global/common/Model";
import * as Vue from 'vue';
import code = require('views/m/user/Code');
import demandDetail = require('views/m/DemandDetail');

class VPresenter extends project.VPresenter {
    private currSessIsOthers: boolean;//当前会话是否是别人的项目会话
    private selfInfo: any;//自己的用户信息
    private selfProject: any;//自己的项目信息
    private selfDemandId: any;//自己的项目id
    private currDemandId: any;//当前项目id
    private tempProject: any;//当前临时的项目
    private privateGroupList: any;//自己的项目的私聊群列表
    private webim: any;
    private webim2: any;
    private proInfo: any;
    private footer: tomato.VPresenter;
    constructor(view: tomato.VPView, parent?: tomato.VPresenter, vpid?: string) {
        super(view, parent, vpid);
        this._watchEvent();
        this._els = this._getElements();
        var that = this;
        /**===================项目列表渲染===================== */
        var v_pros = this.find('.list')[0];
        var pros = model.globalData.demand;
        var len = pros.length;
        new Vue({
            el: v_pros,
            data: {
                pro_list: pros,
                len: len
            },
            methods: {
                openDetails: function (e) {
                    var index = $(e.target).attr('index');
                    model.globalData.current_demand = model.globalData.demand[index];
                    tomato.getVPresenter<demandDetail>(funs.moduleToUrl('m/DemandDetail'), (demandDetail) => {
                        demandDetail.vpid = demandDetail.vpid.replace(/\?(demand=\d*)?/, '?demand=' + model.globalData.current_demand.id);
                        funs.loadPage(demandDetail);
                    })
                }
            }

        });

        /**===================聊天室对话列表渲染===================== */

        //聊天列表渲染
        this.concatSuppliers();
        if (model.globalData.demand.length > 0) {
            var v_suppliers = this.find('.scroll-pane')[0];
            var suppliers = model.globalData.supList;
            new Vue({
                el: v_suppliers,
                data: { friends: suppliers },
                computed: {
                    sortByMsgTime: function () {
                        var list = (this as any).friends;
                        list.forEach(element => {
                            if(element.avatar == ''){
                                element.avatar = '`{VIEWSURL}`/m/ChatRoomTpl/images/supplier.jpg';
                            }
                        });
                        var msgOrder = list.sort(
                            function (a, b) {
                                if (!a.lastMsg || !a.lastMsg.time) return 1;
                                if (!b.lastMsg || !b.lastMsg.time) return -1;
                                if (a.lastMsg.time < b.lastMsg.time) return 1;
                                if (a.lastMsg.time > b.lastMsg.time) return -1;
                                return 0;
                            }
                        );
                        return msgOrder
                    }
                }
            });
            var scrollWidth = model.globalData.supList.length * 60;
            this.find('.scroll-pane').removeClass('hide').css('width', scrollWidth + 'px');
        }
        //聊天界面
        var msgPane = this.find('.chat-pane');
        //输入框输入事件监听
        this.find('#input').on('input propertychange blur', function () {
            //聊天面板滚到底部3t
            msgPane[0].scrollTop = msgPane[0].scrollHeight;
            // $("html,body").animate({scrollTop:9999},100);
            // this.scrollIntoView();
            var v = $(this).val();
            if (v.length > 0 && v.trim().length > 0) {
                that.find('#sendMsg').removeClass("hide").removeAttr('disabled');
                that.find('.enclosure').addClass("hide");
            } else {
                $(this).css('height', '26px');
                that.find('#sendMsg').addClass("hide").attr('disabled', 'disabled');
                that.find('.enclosure').removeClass("hide");
            }
        });
        this.find('#input').click(function () {
            var that = this;
            setTimeout(function () {
                that.scrollIntoView(true);
            }, 100)
        });
        //监听窗口缩放事件
        $(window).resize(function () {
            msgPane[0].scrollTop = msgPane[0].scrollHeight;
        });
        //监听消息发送提交
        this.find('.input-pane').on('submit', function (e) {
            e.preventDefault();
            that._evt_sendMsg();
        });
        //图片选择事件
        $('#imgFile').on('change', function () {
            webimConfigs.sendImage();
        });

        /**====================聊天室逻辑====================== */

        //消息监听
        this.webim = {
            session: '',
            messages: { history: [], news: [] },
            update: function (msgs) {
                var html = '';
                for (var i = 0, j = msgs.length; i < j; i++) {
                    html = html + that.pushMsg(msgs[i]);
                }
                msgPane.append(html);

                var delayTime = 300;
                //如果消息中没有图片,就加快显示速度
                if (html.indexOf('chat-img') < 0) {
                    delayTime = 30;
                }
                //图片加载需要时间,延迟滚动
                setTimeout(function () {
                    msgPane[0].scrollTop = msgPane[0].scrollHeight;
                }, delayTime);

                var id = this.session;
                var lastMsg = msgs[msgs.length - 1].text;
                if (lastMsg.indexOf('chat-img') > 0) {
                    lastMsg = '[图片]'
                }
                // $('.group-item[gid="' + id + '"]').find('.last-msg').html(lastMsg);
            },
            history: function (msgs) {
                // 如果历史消息为空，则造一条假的消息，以便洽谈室的历史消息监听能够获得通知，从而移除loading动画；
                if (msgs.length == 1 && msgs[0].type == 'fake') {
                    msgPane.find('.msgLoding').remove();
                    msgPane[0].scrollTop = msgPane[0].scrollHeight;
                    that._setChatHeight();
                    return
                }
                var html = '';
                for (var i = 0; i < msgs.length; i++) {
                    html = that.pushMsg(msgs[i]) + html;
                }
                msgPane.prepend(html);

                //如果消息中没有图片,就加快显示速度
                var delayTime = 300;
                if (html.indexOf('chat-img') < 0) {
                    delayTime = 30;
                }
                //图片加载需要时间,延迟滚动
                setTimeout(function () {
                    msgPane.find('.msgLoding').remove();
                    msgPane[0].scrollTop = msgPane[0].scrollHeight;
                }, delayTime);
                that._setChatHeight();
            }
        };
        //客户监听所有消息,以实时更新聊天未读消息及群租
        this.webim2 = {
            session: 'all',
            messages: { history: [], news: [] },
            update: function (msgs) {
                $.each(msgs, function (key, value) {
                    if (key == 'version' || key == '4') {
                        return
                    }
                    //其他会话的未读消息处理
                    if (value.news.length > 0 && value.unread > 0) {
                        if (value.unread > 9) {
                            value.unread = '…';
                        }
                        if (key != nim.currSess) {
                            // 如果不是群聊‘不是客服，且参与列表没有此人，则更新工程商列表
                            if (key != '3' && that._getPrivateGroupInfo(key) == '') {
                                that._getCurrentGroup({
                                    succ: function () {
                                        setTimeout(function () {
                                            webimConfigs.contactProjectAndSession();
                                            $('.group-list').find('.active').removeClass('active');
                                            $('div[gid="' + nim.currSess + '"]').addClass('active');
                                        }, 1);
                                    }
                                });
                            }
                        }

                    }

                });
            }
        };

        webimConfigs.addListener(this.webim);
        webimConfigs.addListener(this.webim2);

        // 通过链接直接打开聊天室，或聊天室刷新页面，则等到im初始化完成再调用聊天时初始化方法！！！草！！！
        $(document.body).on('imInit', function () {
            if (webimConfigs.chatRoomReady) {
                that._afterInstallTo()
            }

        });
        this._setChatHeight();
    }
    //打开聊天室初始化方法（模块打开自动调用）
    _afterInstallTo() {
        var that = this;
        if (!webimConfigs.chatRoomReady) {
            return;
        }
        // 如果是界面回退
        // if (this.getInstallEffect()) {
        //     // return
        // }
        this.initChatSession();
    };
    //切换聊天对象 更新设置
    switchSession(sessionID) {
        this._saveDraft(nim.currSess);
        webimConfigs.setCurrSession(sessionID);
        this.webim.session = sessionID;
        this.webim.messages = { history: [], news: [] };
        // 显示loading动画，记录最近的会话id
        if (sessionID != '') {
            var loadingGif = '<img  class="msgLoding" src="`{VIEWSURL}`/m/ChatRoomTpl/images/loading1.gif" width="96" height= "16"/>'
            $('.chat-pane').html(loadingGif);
            webimConfigs.lastSession = sessionID;
        }
    };
    //打开新项目初始化当前回话
    initChatSession() {
        var that = this;
        that.switchSession(webimConfigs.lastSession);
    }
    //在聊天窗口显示消息
    pushMsg(msg) {
        var that = this;
        var fromAccount = msg.from;
        var isSelfSend = msg.flow == 'out';//消息是否为自己发的
        var subType = msg.type;//消息类型
        var triangle, userhead;
        var onemsg = '';
        //普通消息
        if (subType == 'text') {
            //如果自己发的消息
            if (isSelfSend) {
                userhead = '<span class="user-head-icon">您</span>';
                //小三角
                triangle = '<img class="triangle" src="`{VIEWSURL}`/m/ChatRoomTpl/images/triangle.png">';

                onemsg = '<div class="one-message self-msg">' + userhead +
                    '<div class="msgbody"><pre>' + msg.text + '</pre>' + triangle +
                    '</div></div>'
            }
            //不是自己发的消息
            else {
                var msghead = '';
                var isClient = '';
                if (msg.company) {
                    msghead = '<div class="msgfrom-info">' + msg.fromNick + '<span class="msgfrom-company">&nbsp;|&nbsp;' + msg.company + '</span></div>'
                } else {
                    msghead = '<div class="msgfrom-info">' + msg.fromNick + '</span></div>'
                }
                triangle = '<img class="triangle" src="`{VIEWSURL}`/m/ChatRoomTpl/images/triangle2.png">';
                if (!msg.avatar) {
                    msg.avatar = this._getPrivateGroupInfo(msg.from).avatar || '`{VIEWSURL}`/m/ChatRoomTpl/images/supplier.jpg';
                }
                userhead = '<img class="user-head-icon" src="' + msg.avatar + '"/>';

                //小三角
                onemsg = '<div class="one-message ' + isClient + '">' + msghead + userhead +
                    '<div class="msgbody"><pre>' + msg.text + '</pre>' + triangle +
                    '</div></div>';

                //如果是万屏汇客服发的消息 , 默认头像
                if (fromAccount == '3') {
                    var src3 = '`{VIEWSURL}`/m/ChatRoomTpl/images/jvhua.jpg';
                    userhead = '<img class="user-head-icon" src="' + src3 + '"/>';
                    //小角标
                    msghead = '<div class="msgfrom-info">客服代表</div>';
                    onemsg = '<div class="one-message">' + msghead + userhead +
                        '<div class="msgbody"><pre>' + msg.text + '</pre>' + triangle +
                        '</div></div>'
                }
            }
        } else if (msg.from != '3' && subType == 'notification') {

        }
        //如果是图片,去掉<pre>标签
        if (onemsg.indexOf('chat-img') > 0) {
            onemsg = onemsg.replace('<pre>', '').replace('</pre>', '');
        }
        return onemsg
    };
    //发送消息点击事件
    _evt_sendMsg() {
        var that = this;
        var text = $('#input').val();
        if (text.length > 0 && text.trim().length > 0) {
            $('#send').attr('disabled', 'disabled');
            webimConfigs.onSendMsg(text, {
                succ: function (msg) {
                    console.log('发送成功');
                    that.pushMsg(msg);
                    that._clearInput(true);
                    //清空草稿
                    funs.setSession("tmpmsg_" + nim.currSess, '');
                    if (that.selfDemandId == that.currDemandId) {
                        that._sendSmsToSupplier(msg)
                    }
                },
                fail: function (err) {
                    that._evt_sendMsg();
                }
            });
        }
    };
    // 组合当前客户的项目中参与的工程商列表
    concatSuppliers() {
        var supplier_list: any = [];
        var demandList = model.globalData.demand
        if (demandList.length == 1) {
            supplier_list = demandList[0].supplier_list.reverse();
        } else {
            var list = {};
            demandList.forEach(function (demand) {
                demand.supplier_list.reverse().forEach(function (supplier) {
                    list[supplier.id] = supplier;
                })
            });
            for (var key in list) {
                supplier_list.push(list[key]);
            }
        }
        model.globalData.supList = supplier_list;
    }
    //标的客户, 切换聊天对象
    _evt_clientChangeChat(data, obj) {
        var that = this;
        if (!$(obj).hasClass('active')) {
            // 切换样式
            $('.group-list').find('.active').removeClass('active');
            $(obj).addClass('active');
            // 切换会话
            var to_id = $(obj).attr('gid');
            that.switchSession(to_id);
        }
    };
    //获取自己的项目群资料
    _getCurrentGroup(cb) {
        var that = this;
        var succ = function (array) {
            var gm = array.reverse();
            var j = gm.length;

            for (var i = 0; i < j; i++) {
                gm[i].nick = gm[i].nickname;
                gm[i].company_name = gm[i].com;
                gm[i].unread = 0;
            }
            // 重新渲染参与列表以及相关未读消息
            model.globalData.supList = gm;
            var scrollWidth = model.globalData.supList.length * 60;
            that.find('.scroll-pane').removeClass('hide').css('width', scrollWidth + 'px');
            //接受回调
            cb && cb.succ && cb.succ();
        }
        var fail = function () {
            cb && cb.fail && cb.fail();
        }
        api.GetDemandSupplier(succ, fail);
    };
    //查看参与的工程商资料
    _getPrivateGroupInfo(pid) {
        var list = model.globalData.supList;
        var privateGroupInfo: any = '';
        for (var i = 0, j = list.length; i < j; i++) {
            if (pid == list[i].id) {
                privateGroupInfo = list[i];
            }
        }
        return privateGroupInfo
    };
    //发送图片
    _evt_sendImg(data, obj) {
        this.find('#imgFile').trigger('click');
    };
    //清空输入框后发送按钮隐藏
    _clearInput(focus?: boolean) {
        this.find("#input").val('').css('height', '24px');
        focus && this.find("#input").focus();
        this.find('#sendMsg').addClass("hide").removeAttr('disabled');
        this.find('.enclosure').removeClass('hide');
    };
    //如果客户在私聊群发消息,且工程商不在线,则发送短信
    _sendSmsToSupplier(msg) {
        var that = this;
        if (msg.to) {
            if (msg.to != '4' && msg.to != '3') {
                var groupInfo = that._getPrivateGroupInfo(msg.to);
                if (groupInfo.online == 0 && that._getPrivateGroupInfo(msg.to).online == 0) {
                    var data = {
                        "demand_id": model.globalData.demand[0].id,
                        "supplier_id": groupInfo.id,
                    };
                    //客户主动跟工程商私聊时，给工程商发送短信提醒
                    api.sendSmsToSupplier(data);
                }
            }
        }
    };
    // 保存草稿
    _saveDraft(toSel) {
        //保存当前的消息输入框内容到草稿
        var msgtosend = this.find('#input').val();
        if (msgtosend) {
            var msgLen = msgtosend.trim().length;
        }
        if (msgLen > 0) {
            funs.setSession("tmpmsg_" + nim.currSess, msgtosend);
        }
        //清空聊天界面
        $(".chat-pane").html('');
        if (toSel) {
            //获取缓存的草稿内容
            var tmgmsgtosend = funs.getSession("tmpmsg_" + toSel);
            if (tmgmsgtosend) {
                this.find("#input").val(tmgmsgtosend);
            }
        }
        this._clearInput();
    };
    //重设聊天界面的高度
    _setChatHeight() {
        var phoneH = document.documentElement.clientHeight || $(window).height();
        var topBarH = this.find('.TopBar').innerHeight();
        var grabH = this.find('.demand_list').innerHeight();
        var inputH = this.find('.input-pane').innerHeight();
        var merberH = this.find('.chat-member').not('.hide').innerHeight();
        var aaa = phoneH - grabH - inputH - merberH - topBarH - 3;
        this.find('.chat-pane').css('height', aaa + 'px');
    };
    // 页面卸载事件
    _afterUninstallTo() {
        this.switchSession('');
    }
    /*==============录音音频处理-start=============*/
    //录音播放暂停
    _evt_playPause(data, target) {
        var that = this;
        //如果录音加载失败
        var audioTime = this.find('.audio-time');
        var audio: any = document.getElementById("audioTag");
        if (audio.paused) {
            audio.play();
            //改变icon
            $(target).find('span').removeClass('icon-play-one').addClass('icon-pause-one')
        } else {
            audio.pause();
            $(target).find('span').removeClass('icon-pause-one').addClass('icon-play-one')
        }

        //监听音频播放时间并更新进度条
        audio.addEventListener('timeupdate', that.updateProgress, false);
        //监听播放完成事件
        audio.addEventListener('ended', that.audioEnded, false);
    };

    //更新进度条
    updateProgress() {
        var audio = document.getElementsByTagName('audio')[0];
        this.find('.audio-time').html(this.transTime(audio.duration - audio.currentTime));
    }
    //播放完成
    audioEnded() {
        var audio = document.getElementsByTagName('audio')[0];
        audio.currentTime = 0;
        audio.pause();
        this.find('.play-pause>span').removeClass('icon-pause-one').addClass('icon-play-one');
    }
    //转换音频时长格式
    transTime(time) {
        var duration = parseInt(time);
        var minute: any = Math.floor(duration / 60);
        var sec = duration % 60 + '';
        var isM0 = ':';
        if (minute == 0) {
            minute = '00';
        } else if (minute < 10) {
            minute = '0' + minute;
        }
        if (sec.length == 1) {
            sec = '0' + sec;
        }
        return minute + isM0 + sec
    }
    /*==============录音音频处理-end=============*/
    //点击查看大图
    _evt_scanBig = function (data, obj) {
        var src = $(obj).attr('src');
        var width = $(obj).width();
        var height = $(obj).height();
        var rate = width / height;//宽高比
        var hh = $(window).width();//大图的宽 == 屏幕宽度
        var bgh = hh / rate / 2;  // 计算出大图的高度 de 一半

        //dom插入
        var bigImg = '<div class="bigImgBg" evt="closeBigImg"><img class="bigImg" src="' + src + '"/></div>';
        $(this.view).append(bigImg);

        //让图片垂直居中
        $('.bigImg').css('margin-top', -bgh + 'px');
    };
    _evt_closeBigImg = function (data, obj) {
        $(obj).remove();
    };
    _evt_unfold(data, obj) {
        this.find('.list').addClass('open');
        $(obj).hide();
    };
    _evt_fold() {
        this.find('.list').removeClass('open').find('.unfold').show();
    };
    _evt_openDemandInfo(data, obj) {
        var did = $(obj).attr("did");
        var dlist = model.globalData.demand;
        dlist.forEach(item => {
            if (item.id == did) {
                model.globalData.current_demand = item;
                tomato.getVPresenter<demandDetail>(funs.moduleToUrl('m/DemandDetail'), (demandDetail) => {
                    demandDetail.vpid = demandDetail.vpid.replace(/\?(demand=\d*)?/, '?demand=' + model.globalData.current_demand.id);
                    funs.loadPage(demandDetail);
                });
            }
        });
    };
}
export = VPresenter;