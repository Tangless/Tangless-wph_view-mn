import * as tomato from "@po-to/tomato";
import * as project from "views/global/common/Project";
import * as funs from "views/global/common/Funs";
import * as model from "views/global/common/Model";
import * as Vue from "vue";
import css = require("./css");
import * as api from "views/global/common/API";
import * as EXIF from "exif-js"

class VPresenter extends project.VPresenter {
    /**模块 */
    private ImageUploader_vue: any;
    /**预览图片 */
    private imgUrl: JQuery;
    private preview;
    /**上次input控件 */
    private inputUpload;
    private btnUpload: JQuery;
    /**demand */
    private demand;
    private file;
    private orientation;
    private tempImg: HTMLImageElement;

    // private form;
    constructor(view: tomato.VPView, parent?: tomato.VPresenter, vpid?: string) {
        super(view, parent, vpid);
        this.imgUrl = this.find(".imageUrl");
        var that = this;
        var canvas = document.createElement('canvas');
        this.tempImg = document.createElement("img");
        this.tempImg.style.display = "none";
        $('body').append(this.tempImg);
    
        this.tempImg.onload = function (event) {
            var degree = 0, drawWidth, drawHeight, width, height;
            drawWidth = (this as HTMLImageElement).naturalWidth;
            drawHeight = (this as HTMLImageElement).naturalHeight;
            //改变图片大小
            if (drawWidth > 500) {//按最大高度等比缩放
                var rate = 500 / drawWidth;
                drawHeight = drawHeight * rate;
                drawWidth = 500;
            }
            var canvas = document.createElement('canvas');
            canvas.width = width = drawWidth;
            canvas.height = height = drawHeight;
            var context = canvas.getContext('2d');
            if (context) {
                // 由于ios上传图片时，旋转拍摄的图片会倒置，方向不对，因此需要调整；
                //判断图片方向，重置canvas大小，确定旋转角度，iphone默认的是home键在右方的横屏拍摄方式
                switch (that.orientation) {
                    //iphone横屏拍摄，此时home键在左侧
                    case 3:
                        degree = 180;
                        drawWidth = -width;
                        drawHeight = -height;
                        break;
                    //iphone竖屏拍摄，此时home键在下方(正常拿手机的方向)
                    case 6:
                        canvas.width = height;
                        canvas.height = width;
                        degree = 90;
                        drawWidth = width;
                        drawHeight = -height;
                        break;
                    //iphone竖屏拍摄，此时home键在上方
                    case 8:
                        canvas.width = height;
                        canvas.height = width;
                        degree = 270;
                        drawWidth = -width;
                        drawHeight = height;
                        break;
                }
                //使用canvas旋转校正
                context.rotate(degree * Math.PI / 180);
                context.drawImage((this as any), 0, 0, drawWidth, drawHeight);
                that.demand.image = canvas.toDataURL("image/jpeg");
                that.setImg();
            }
        }
        var aaa = css;//hack
        var user = model.globalData.user;
        var demand = this.demand = model.globalData.current_demand;

        this.preview = this.find(".preview");
        this.btnUpload = this.find(".btn-upload ");
        this.inputUpload = this.find(".input-upload");
        /**删除预览 */
        this.preview.on('click', function () {
            that.demand.image = '';
            that.tempImg.src = '';
            that.setImg();
            that.inputUpload.val('');
        });
        /**预览上传图片 */
        this.inputUpload.on('change', function (event) {
            // 根据这个 <input> 获取文件的 HTML5 js 对象
            var files = event.target.files, file;
            if (files && files.length > 0) {
                // 获取目前上传的文件
                file = that.file = files[0];
                // 来在控制台看看到底这个对象是什么
                console.log(file);
                // 那么我们可以做一下诸如文件大小校验的动作
                // if (file.size > 1024 * 1024 * 2) {
                //     alert('图片大小不能超过 2MB!');
                //     return false;
                // }

                // 图片预览 function 1
                if (window['FileReader']) {
                    var reader = new FileReader();
                } else {
                    alert("您的设备不支持图片预览功能，如需该功能请升级您的设备！");
                }
                var reader = new FileReader();
                var imageType = /^image\//;

                //是否是图片
                if (!imageType.test(file.type)) {
                    alert("请选择图片！");
                    return;
                }
                //处理IOS 拍照方向
                EXIF.getData(file, function () {
                    that.orientation = EXIF.getTag(this, 'Orientation');
                });
                reader.readAsDataURL(file);

                reader.onload = function () {
                    if (!this.result) return false;
                    that.tempImg.src = this.result;
                };
            }
        });
        this.setImg();
        //this._watchEvent();
    }

    /** 初始化*/
    private setImg() {
        console.log('setImg succ');
        /**是否有图片 */
        if ("" == this.demand.image) {
            this.imgUrl.attr('src', "");
            this.preview.addClass("hide");
            this.btnUpload.removeClass("hide");
        } else {
            this.imgUrl.attr('src', this.demand.image);
            this.btnUpload.addClass("hide");
            this.preview.removeClass("hide");
        }
    }
    // 修复ios图片上传旋转问题
    private rotateImg(img, direction, canvas) {
        //最小与最大旋转方向，图片旋转4次后回到原方向    
        var min_step = 0;
        var max_step = 3;
        if (img == null) return;
        //img的高度和宽度不能在img元素隐藏后获取，否则会出错    
        var height = img.height;
        var width = img.width;
        //var step = img.getAttribute('step');    
        var step = 2;
        if (step == null) {
            step = min_step;
        }
        if (direction == 'right') {
            step++;
            //旋转到原位置，即超过最大值    
            step > max_step && (step = min_step);
        } else {
            step--;
            step < min_step && (step = max_step);
        }
        //旋转角度以弧度值为参数    
        var degree = step * 90 * Math.PI / 180;
        var ctx = canvas.getContext('2d');
        console.log('step=' + step);
        switch (step) {
            case 0:
                canvas.width = width;
                canvas.height = height;
                ctx.drawImage(img, 0, 0);
                break;
            case 1:
                canvas.width = height;
                canvas.height = width;
                ctx.rotate(degree);
                ctx.drawImage(img, 0, -height);
                break;
            case 2:
                canvas.width = width;
                canvas.height = height;
                ctx.rotate(degree);
                ctx.drawImage(img, -width, -height);
                break;
            case 3:
                canvas.width = height;
                canvas.height = width;
                ctx.rotate(degree);
                ctx.drawImage(img, -width, 0);
                break;
        }
    }
    /**上传文件，参数:文件地址 */
    public fileUpload() {
        var that = this;
        var demand_id = this.demand.id;
        var formData = new FormData();
        var img = that.demand.image;
        var imgBase64 = img.substr(img.indexOf(',') + 1);
        formData.append('demand_id', demand_id);
        formData.append('img', imgBase64);
        $.ajax({
            xhrFields: { withCredentials: true },
            url: '`{APIURL}`/Client/Img/uploadDemandImg',
            type: 'POST',
            cache: false,
            data: formData,
            processData: false,
            contentType: false
        }).done(function (json) {
            console.log("::" + json.image);
            if (json.status == 200) {
                model.globalData.current_demand.image = json.img;
            } else {
                funs.tip('图片上传失败', '', 'fail');
            }
        }).fail(function (json) {
            funs.tip('服务器错误', '', 'fail')
        });
    }
}
export = VPresenter;