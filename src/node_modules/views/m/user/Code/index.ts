import * as tomato from "@po-to/tomato";
import * as project from "views/global/common/Project";
import * as Vue from "vue";
import * as model from "views/global/common/Model";
import * as api from "views/global/common/API";
import * as funs from "views/global/common/Funs";

class VPresenter extends project.VPresenter {
    /**模块 */
    private Code_vue: any;
    /**手机号 */
    private phone;
    /**demand_id */
    private demand_id;
    /**验证码倒计时 */
    private codeGain;
    /**span */
    private codeParent;
    /**callback */
    private _call_back_function;
    private _mobile;

    constructor(view: tomato.VPView, parent?: tomato.VPresenter, vpid?: string) {
        super(view, parent, vpid);

        var vueDom = this.find("#Code_vue").get(0);
        var user = model.globalData.user;
        var demand = model.globalData.demand;
        
        this.codeGain = this.find(".c-code-gain");
        this.codeParent = this.find(".c-code-put");
        this.getCode();
        this.inputFocus();

        this._watchEvent();
        var that = this;
        // 关闭验证码同时关闭聊天室界面
        this.addListener(tomato.DialogEvent.Closed, function () {
            that.codeParent.html('').attr('contenteditable', 'true');
            funs.viewHistory.go(-1);
        })
    }
    setCallBack(mobile, setCallBack) {
        this._call_back_function = setCallBack;
        this._mobile = mobile;
        this.find('.c-code-phone').html(this._mobile);
    }

    private getCode = function () {
        var that = this;
        that.codeCountDown();
    }

    private codeCountDown = function () {
        var that = this;
        that.codeGain.html('60s后重新获取验证码').prop('disabled', true);
        var wait = 60;
        var timer = setInterval(function () {
            wait--;
            that.codeGain.html(wait + 's后重新获取验证码');
            if (wait < 1) {
                clearInterval(timer);
                this.timer = null;
                that.codeGain.html('重新获取验证码').prop('disabled', false).addClass('code-blue');
            }
        }, 1000)
    }

    public _evt_getCode = function () {
        var that = this;
        var phone = that._mobile;
        //a02发送手机验证码接口
        api.SendSmsCaptcha(phone, function (json) {
            //倒计时
            that.codeCountDown();
        }, function (error: tomato.PError) {
            funs.tip(error.note, "", "fail");
        });
    }

    private inputFocus = function () {
        var that = this;

        this.codeParent.bind('input propertychange', 'input', function (event) {
            var sum = this.innerHTML;
            if (4 == sum.length) {
                $(this).attr('contenteditable', 'false');
                console.log(sum + '4位数字，尝试校验...');
                that.verifyPasscode(sum);
            }
        });
    }

    private verifyPasscode = function (passcode) {
        var that = this;
        var data = {
            phone: that._mobile,
            demand_id: that.demand_id,
            sms_captcha: passcode
        }
        api.Login(that._mobile, passcode, function (data: any) {
            //登录成功
            that._call_back_function();
        }, function (error) {
            that.codeParent.html('').attr('contenteditable', 'true');;
        });

        // api.ActivateDemand(data, function () {
        //     console.log("创建成功");
        //     localStorage.setItem("chatroom", 'open');//存储变量名为key，值为value的变量
        //     window.location.reload();
        // }, function (data: tomato.PError) {
        //     alert(data.note);
        //     that.codeParent.html('').attr('contenteditable', 'true');;
        // })
        // // c33-验证激活待完善项目
        // a_demand_activate_project(this.phone, passcode, demand_id, {
        //     succ: function (json) {


        //         // 请求成功，则记一个cookie，以便刷新页面时如果有这个cookie，则打开聊天室
        //         // 而打开弹层的判断要在CustomerIterPage.js中操作

        //         localStorage.setItem("chatroom", 'open');//存储变量名为key，值为value的变量
        //         window.location.reload();

        //     },
        //     fail: function (json) {
        //         alert(json.msg)
        //         $(that._els.incode).find('input').val('');
        //         $(that._els.incode).eq(0).find('input').focus();

        //     }
        // });
    }
}
export = VPresenter;